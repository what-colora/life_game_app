
def next_step(grid):    
    # グリッドのサイズ たてxよこ : 30x30マス
    size = 30

    # 現在地(grid[i][j])の周囲8セルに存在する生存セル(1)の個数をカウントする関数
    def count_neighbors(i,j):
        res = 0
        ####################################################################################################################################
        #　　　以下に処理を記入する。
        #　　　処理内容：
        #       grid[i][j]の周囲8セルを走査して、1の個数をカウントする。
        #       配列の範囲外を参照しないように処理すること。
        #       出力：変数resに格納すること。
        ####################################################################################################################################





        ####################################################################################################################################

        return res

    # 結果格納用の2次元配列
    result = [[0 for _ in range(size)] for _ in range(size)]

    # 次ステップのグリッドの描画・計算処理
    for i in range(size):
        for j in range(size):
            # 現在地(grid[i][j])の周囲8セルにある生存セルの個数
            neighbors = count_neighbors(i,j)

            ####################################################################################################################################
            #　　　以下に処理を記入する。
            #　　　処理内容：
            #       周囲8セルの生存セルの個数と現在地(grid[i][j])のセルの状態(生存1 or 死亡0)に応じて、次のステップにおける現在地のセルの状態を確定させる。
            #       グリッド全体(30x30)を走査し、結果はresult[i][j]に格納する。
            ####################################################################################################################################





            ####################################################################################################################################

    return result

if __name__ == "__main__":
    next_step()

